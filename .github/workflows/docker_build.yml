name: Workflow to build Docker image
on:
  workflow_call:
    outputs:
      docker_tags:
        description: "docker image full name"
        value: ${{ jobs.build.outputs.docker_tags }}
      runner:
        description: "build runner name"
        value: ${{ jobs.build.outputs.runner }}
    inputs:
      project:
        required: true
        type: string
      component:
        # not required now
        required: false
        type: string
      node_env:
        required: false
        type: string
        default: "production"
      load:
        required: false
        type: boolean
        default: true
      push:
        required: false
        type: boolean
        default: true
      docker_context:
        description: "the path where docker build execute."
        required: false
        default: "./"
        type: string
      docker_file:
        description: "the Dockerfile to build"
        required: false
        default: "./Dockerfile"
        type: string
      runner:
        ## ['cn', 'us', 'cn1', 'cn2', 'cn3', 'us1', 'us2', 'us3']
        type: string
        default: "cn"
        required: false
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      NPM_TOKEN:
        required: false

jobs:
  build:
    name: build docker image
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 20
    env:
      COMPONENT_NAME: "${{ inputs.component || github.event.repository.name }}"
      REGISTRY: "registry.wiredcraft.cn"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.project }}/${{ env.COMPONENT_NAME }}
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=ref,event=tag
            type=edge,branch=develop
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to PrivateRegistry
        # https://github.com/actions/runner/issues/1483
        if: ${{ inputs.push }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD}}

      - name: Build and load to local with cache
        uses: docker/build-push-action@v2
        if: ${{ inputs.load }}
        with:
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.docker_file }}
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: ${{ inputs.load }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            OMNI_COMPONENT=${{ env.COMPONENT_NAME }}
            NODE_ENV=${{ inputs.node_env }}
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            OMNI_COMPONENT_COMMIT=${{ github.sha }}
            OMNI_COMPONENT_VERSION=${{ steps.meta.outputs.version }}


      - name: Build and push to remote registry with cache
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.docker_file }}
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            OMNI_COMPONENT=${{ env.COMPONENT_NAME }}
            NODE_ENV=${{ inputs.node_env }}
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            OMNI_COMPONENT_COMMIT=${{ github.sha }}
            OMNI_COMPONENT_VERSION=${{ steps.meta.outputs.version }}

    outputs:
      docker_tags: ${{ steps.meta.outputs.tags }}
      runner: ${{ runner.name }}

