name: Workflow to scan vulnerability
on:
  # workflow_run:
  #   workflows: ["Workflow to build Docker image"]
  #   types:
  #     - completed
  workflow_call:
    inputs:
      runner:
        ## ['cn', 'us', 'cn1', 'cn2', 'cn3', 'us1', 'us2', 'us3', ' ubuntu-latest']
        type: string
        ## use github hosted runner by default
        default: "ubuntu-latest"
        required: false
      project:
        required: true
        type: string
      component:
        required: false
        type: string
    secrets:
      MINIO_CN_ACCESS_KEY_ID:
        required: true
      MINIO_CN_SECRET_ACCESS_KEY:
        required: true
jobs:
  scanning:
    name: vulnerability scanning
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 20
    env:
      COMPONENT_NAME: "${{ inputs.component || github.event.repository.name }}"

    steps:
      # - name: Checkout repo
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: "0"

            # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@v3
      #   with:
      #     images: ${{ secrets.REGISTRY }}/${{ inputs.project }}/${{ env.COMPONENT_NAME }}
      #     tags: |
      #       type=edge
      #       type=ref,event=branch
      #       type=ref,event=tag

      - id: trivy-db
        name: Check trivy db sha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          sudo apt install -y jq
          endpoint='/orgs/aquasecurity/packages/container/trivy-db/versions'
          headers='Accept: application/vnd.github+json'
          jqFilter='.[] | select(.metadata.container.tags[] | contains("latest")) | .name | sub("sha256:";"")'
          sha=$(gh api -H "${headers}" "${endpoint}" | jq --raw-output "${jqFilter}")
          echo "Trivy DB sha256:${sha}"
          echo "::set-output name=sha::${sha}"

      - uses: actions/cache@v3
        with:
          path: .trivy
          key: ${{ runner.os }}-trivy-db-${{ steps.trivy-db.outputs.sha }}

      - name: Checkout trivy ignore files.
        uses: actions/checkout@v2
        with:
          repository: Wiredcraft/github-actions
          path: ./trivyignore
          ref: trivy-whitelist
          
          
      - name: Set docker image tar version
        id: setimgver
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=IMAGE_TAR_VER::$calculatedSha"

      - name: download docker image from minio
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.MINIO_CN_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.MINIO_CN_SECRET_ACCESS_KEY }}
          aws --endpoint-url http://10.10.1.30:9000 s3 cp s3://docker-img-artifacts/${{ inputs.project }}-${{ env.COMPONENT_NAME }}-${{ steps.setimgver.outputs.IMAGE_TAR_VER }}.tar ./
      
      - name: Run Trivy vulnerability scanner in image mode
        uses: aquasecurity/trivy-action@master
        with:
          # image-ref: ${{ needs.build.outputs.imageTag }}
          format: 'table'
          input: ./${{ inputs.project }}-${{ env.COMPONENT_NAME }}-${{ steps.setimgver.outputs.IMAGE_TAR_VER }}.tar
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          security-checks: secret,vuln
          ignore-unfixed: true
          cache-dir: .trivy
          exit-code: '1'
        continue-on-error: true
          
      - name: Fix .trivy permissions
        run: sudo chown -R $(stat . -c %u:%g) .trivy

