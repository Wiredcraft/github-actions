name: Workflow to scan vulnerability
on:
  workflow_call:
    inputs:
      project:
        type: string
        required: true
      component:
        type: string
        required: true
      omni_component_ver:
        type: string
        required: true
      runner:
        ## ['cn', 'us', 'cn1', 'cn2', 'cn3', 'us1', 'us2', 'us3', ' ubuntu-latest']
        type: string
        ## use github hosted runner by default
        default: "ubuntu-latest"
        required: false
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      REGISTRY:
        required: true
    # secrets:
    #   MINIO_ACCESS_KEY_ID:
    #     required: false
    #   MINIO_SECRET_ACCESS_KEY:
    #     required: false
    #   MINIO_ENDPOINT_URL:
    #     required: false
jobs:
  scanning:
    name: vulnerability scanning
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 20

    steps:
      # - name: trivy scan mode(image or repo)
      #   id: trivymode
      #   run: |
      #     if [[ ${{ secrets.MINIO_ENDPOINT_URL }} != "" && ${{ secrets.MINIO_ACCESS_KEY_ID }} != "" && ${{ secrets.MINIO_SECRET_ACCESS_KEY }} != "" && ${{ inputs.image_tar_name }} != "" ]];then
      #     echo "TRIVY_IMG_MODE=true" >> $GITHUB_ENV
      #     echo "trivy image mode !"
      #     else
      #     echo "TRIVY_IMG_MODE=false" >> $GITHUB_ENV
      #     echo "trivy repo mode!"
      #     fi

      - name: Checkout repo
        if: ${{ env.TRIVY_IMG_MODE == false }}
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - id: trivy-db
        name: Check trivy db sha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          sudo apt install -y jq
          endpoint='/orgs/aquasecurity/packages/container/trivy-db/versions'
          headers='Accept: application/vnd.github+json'
          jqFilter='.[] | select(.metadata.container.tags[] | contains("latest")) | .name | sub("sha256:";"")'
          sha=$(gh api -H "${headers}" "${endpoint}" | jq --raw-output "${jqFilter}")
          echo "Trivy DB sha256:${sha}"
          echo "::set-output name=sha::${sha}"

      - uses: actions/cache@v3
        with:
          path: .trivy
          key: ${{ runner.os }}-trivy-db-${{ steps.trivy-db.outputs.sha }}

      - name: Checkout trivy ignore files.
        uses: actions/checkout@v2
        with:
          repository: Wiredcraft/github-actions
          path: ./trivyignore
          ref: trivy-whitelist

      # - name: download docker image from minio
      #   if: env.TRIVY_IMG_MODE
      #   run: |
      #     export AWS_ACCESS_KEY_ID=${{ secrets.MINIO_ACCESS_KEY_ID }}
      #     export AWS_SECRET_ACCESS_KEY=${{ secrets.MINIO_SECRET_ACCESS_KEY }}
      #     aws --endpoint-url ${{ secrets.MINIO_ENDPOINT_URL }} s3 cp s3://docker-img-artifacts/${{ inputs.image_tar_name }} ./

      # - name: Run Trivy vulnerability scanner in image mode
      #   if: env.TRIVY_IMG_MODE
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     format: 'table'
      #     input: ./${{ inputs.image_tar_name }}
      #     severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
      #     security-checks: secret,vuln
      #     ignore-unfixed: true
      #     cache-dir: .trivy
      #     exit-code: '1'
      #   continue-on-error: true

      # - name: Run Trivy vulnerability scanner in image mode
      #   if: env.TRIVY_IMG_MODE
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     format: 'table'
      #     input: ./${{ inputs.image_tar_name }}
      #     severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
      #     security-checks: secret,vuln
      #     ignore-unfixed: true
      #     cache-dir: .trivy
      #     exit-code: '1'
      #   continue-on-error: true

      # - name: Run Trivy vulnerability scanner in image mode
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ inputs.scanning_image_name }}
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     cache-dir: .trivy
      #     # vuln-type: 'os,library'
      #     severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
      #   continue-on-error: true

      # - name: Run Trivy vulnerability scanner in repo mode
      #   if: ${{ env.TRIVY_IMG_MODE == false }}
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     ignore-unfixed: true
      #     trivyignores: trivyignore/.trivyignore
      #     security-checks: secret,vuln
      #     format: 'table'
      #     severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
      #     exit-code: '1'
      #     cache-dir: .trivy
# https://registry.wiredcraft.cn/api/v2.0/projects/tiffany/repositories/tiffany-association/artifacts/v1.1.0/scan
      # - name: Invoke harbor scan api.
      #   uses: fjogeleit/http-request-action@v1
      #   with:
      #     url: 'https://${{ secrets.REGISTRY }}/api/v2.0/projects/${{ inputs.project }}/repositories/${{ inputs.component }}/artifacts/${{ inputs.omni_component_ver }}/scan'
      #     method: 'POST'
      #     username: 'victor.chan'
      #     password: 'chazete9chieMulo'
      #     customHeaders: '{"Content-Type": "application/json"}'
          # data: ''
      - name: Get scan output from harbor.
        run: |
          sleep 5
          response=$(curl -u victor.chan:chazete9chieMulo -H "X-Accept-Vulnerabilities: application/vnd.security.vulnerability.report; version=1.1" "https://${{ secrets.REGISTRY }}/api/v2.0/projects/${{ inputs.project }}/repositories/${{ inputs.component }}/artifacts/${{ inputs.omni_component_ver }}?with_scan_overview=true" | jq .)
          echo "$response"
      # - name: Get scan output from harbor.
      #   id: get_scan_output
      #   uses: fjogeleit/http-request-action@v1
      #   with: 
      #     url: 'https://${{ secrets.REGISTRY }}/api/v2.0/projects/${{ inputs.project }}/repositories/${{ inputs.component }}/artifacts/${{ inputs.omni_component_ver }}?with_scan_overview=true'
      #     method: 'GET'
      #     username: 'victor.chan'
      #     password: 'chazete9chieMulo'
      #     customHeaders: '{"X-Accept-Vulnerabilities": "application/vnd.security.vulnerability.report","version": "1.1"}'
      #     # data: ''
      
      # - name: Show scan report from harbor.
      #   run: |
      #     echo "${{ steps.get_scan_output.outputs.response }} }}"


      # - name: Fix .trivy permissions
      #   run: sudo chown -R $(stat . -c %u:%g) .trivy

