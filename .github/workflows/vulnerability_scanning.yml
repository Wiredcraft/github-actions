name: Workflow to scan vulnerability
on:
  workflow_call:
    inputs:
      image_tar_name:
        type: string
        required: false    
      runner:
        ## ['cn', 'us', 'cn1', 'cn2', 'cn3', 'us1', 'us2', 'us3', ' ubuntu-latest']
        type: string
        ## use github hosted runner by default
        default: "ubuntu-latest"
        required: false
    secrets:
      MINIO_CN_ACCESS_KEY_ID:
        required: true
      MINIO_CN_SECRET_ACCESS_KEY:
        required: true
      MINIO_CN_ENDPOINT_URL:
        required: false
jobs:
  scanning:
    name: vulnerability scanning
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 20
    env:
      MINIO_CN_ENDPOINTS: ${{ secrets.MINIO_CN_ENDPOINT_URL }}
      MINIO_CN_ACCESS_KEY_ID: ${{ secrets.MINIO_CN_ACCESS_KEY_ID }}
      MINIO_CN_SECRET_ACCESS_KEY: ${{ secrets.MINIO_CN_SECRET_ACCESS_KEY }}
      IMG_TAR_NAME: ${{ inputs.image_tar_name }}
    steps:
      - name: Checkout repo
        if: ${{ env.Trivy_IMG_MODE == false }}
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - id: trivy-db
        name: Check trivy db sha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          sudo apt install -y jq
          endpoint='/orgs/aquasecurity/packages/container/trivy-db/versions'
          headers='Accept: application/vnd.github+json'
          jqFilter='.[] | select(.metadata.container.tags[] | contains("latest")) | .name | sub("sha256:";"")'
          sha=$(gh api -H "${headers}" "${endpoint}" | jq --raw-output "${jqFilter}")
          echo "Trivy DB sha256:${sha}"
          echo "::set-output name=sha::${sha}"

      - uses: actions/cache@v3
        with:
          path: .trivy
          key: ${{ runner.os }}-trivy-db-${{ steps.trivy-db.outputs.sha }}

      - name: Checkout trivy ignore files.
        uses: actions/checkout@v2
        with:
          repository: Wiredcraft/github-actions
          path: ./trivyignore
          ref: trivy-whitelist

      - name: trivy scan mode(image or repo)
        id: trivymode
        run: |
          if [[ ${{ env.MINIO_CN_ENDPOINTS }} != "" && ${{ env.MINIO_CN_ACCESS_KEY_ID }} != "" && ${{ env.MINIO_CN_SECRET_ACCESS_KEY }} != "" && ${{ env.IMG_TAR_NAME }} != "" ]];then
          echo "Trivy_IMG_MODE=true" >> $GITHUB_ENV
          echo "trivy image mode !"
          else
          echo "Trivy_IMG_MODE=false" >> $GITHUB_ENV
          echo "trivy repo mode!"
          fi
                
      - name: download docker image from minio
        if: env.Trivy_IMG_MODE
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.MINIO_CN_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.MINIO_CN_SECRET_ACCESS_KEY }}
          aws --endpoint-url ${{ secrets.MINIO_CN_ENDPOINT_URL }} s3 cp s3://docker-img-artifacts/${{ inputs.image_tar_name }} ./
      
      - name: Run Trivy vulnerability scanner in image mode
        if: env.Trivy_IMG_MODE
        uses: aquasecurity/trivy-action@master
        with:
          format: 'table'
          input: ./${{ inputs.image_tar_name }}
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          security-checks: secret,vuln
          ignore-unfixed: true
          cache-dir: .trivy
          exit-code: '1'
        continue-on-error: true

      - name: Run Trivy vulnerability scanner in repo mode
        if: ${{ env.Trivy_IMG_MODE == false }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          trivyignores: trivyignore/.trivyignore
          security-checks: secret,vuln
          format: 'table'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: '1'
          cache-dir: .trivy
 
      - name: Fix .trivy permissions
        run: sudo chown -R $(stat . -c %u:%g) .trivy

